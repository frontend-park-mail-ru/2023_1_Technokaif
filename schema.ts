/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/albums/": {
    /** Create new album by sent object */
    post: {
      parameters: {
        body: {
          /** Album info */
          album: definitions["http.albumCreateInput"];
        };
      };
      responses: {
        /** Album created */
        200: {
          schema: definitions["http.albumCreateResponse"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/albums/{albumID}/": {
    /** Get album with chosen ID */
    get: {
      responses: {
        /** Album got */
        200: {
          schema: definitions["models.AlbumTransfer"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
    /** Delete album with chosen ID */
    delete: {
      responses: {
        /** Album deleted */
        200: {
          schema: definitions["http.albumDeleteResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/albums/{albumID}/like": {
    /** Set like by user to chosen album (add to favorite) */
    post: {
      responses: {
        /** Like set */
        200: {
          schema: definitions["http.albumLikeResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/albums/{albumID}/tracks": {
    /** All tracks of album with chosen ID */
    get: {
      responses: {
        /** Show tracks */
        200: {
          schema: definitions["models.TrackTransfer"][];
        };
        /** Bad request */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/albums/{albumID}/unlike": {
    /** Remove like by user from chosen album (remove from favorite) */
    post: {
      responses: {
        /** Like removed */
        200: {
          schema: definitions["http.albumLikeResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/albums/feed": {
    /** Feed albums */
    get: {
      responses: {
        /** Albums feed */
        200: {
          schema: definitions["models.AlbumTransfer"][];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/albums/search": {
    /** Find amount of albums by search-query */
    post: {
      parameters: {
        body: {
          /** Query for search */
          query: definitions["delivery.searchRequest"];
        };
      };
      responses: {
        /** Albums found */
        200: {
          schema: definitions["delivery.searchAlbumsResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/": {
    /** Create new artist by sent object */
    post: {
      parameters: {
        body: {
          /** Track info */
          artist: definitions["http.artistCreateInput"];
        };
      };
      responses: {
        /** Artist created */
        200: {
          schema: definitions["http.artistCreateResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/{artistID}/": {
    /** Get artist with chosen ID */
    get: {
      responses: {
        /** Artist got */
        200: {
          schema: definitions["models.ArtistTransfer"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
    /** Delete artist with chosen ID */
    delete: {
      responses: {
        /** Artist deleted */
        200: {
          schema: definitions["http.artistDeleteResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/{artistID}/albums": {
    /** All albums of artist with chosen ID */
    get: {
      responses: {
        /** Show albums */
        200: {
          schema: definitions["models.AlbumTransfer"][];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/{artistID}/like": {
    /** Set like by user to chosen artist (add to favorite) */
    post: {
      responses: {
        /** Like set */
        200: {
          schema: definitions["http.artistLikeResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/{artistID}/tracks": {
    /** All tracks of artist with chosen ID */
    get: {
      responses: {
        /** Show tracks */
        200: {
          schema: definitions["models.TrackTransfer"][];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/{artistID}/unlike": {
    /** Remove like by user from chosen artist (remove from favorite) */
    post: {
      responses: {
        /** Like removed */
        200: {
          schema: definitions["http.artistLikeResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/feed": {
    /** Feed artists */
    get: {
      responses: {
        /** Artists feed */
        200: {
          schema: definitions["models.ArtistTransfer"][];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/artists/search": {
    /** Find amount of artists by search-query */
    post: {
      parameters: {
        body: {
          /** Query for search */
          query: definitions["delivery.searchRequest"];
        };
      };
      responses: {
        /** Artists found */
        200: {
          schema: definitions["delivery.searchArtistsResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/auth/login": {
    /** Login account */
    post: {
      parameters: {
        body: {
          /** username and password */
          userInput: definitions["http.loginInput"];
        };
      };
      responses: {
        /** User created */
        200: {
          schema: definitions["http.loginResponse"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/auth/logout": {
    /** Logout account */
    get: {
      responses: {
        /** User loged out */
        200: {
          schema: definitions["http.logoutResponse"];
        };
        /** Logout fail */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/auth/signup": {
    /** Create account */
    post: {
      parameters: {
        body: {
          /** User info */
          user: definitions["models.User"];
        };
      };
      responses: {
        /** User created */
        200: {
          schema: definitions["http.signUpResponse"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/": {
    /** Create new playlist by sent object */
    post: {
      parameters: {
        body: {
          /** Playlist info */
          playlist: definitions["http.playlistCreateInput"];
        };
      };
      responses: {
        /** Playlist created */
        200: {
          schema: definitions["http.playlistCreateResponse"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/": {
    /** Get playlist with chosen ID */
    get: {
      responses: {
        /** Playlist got */
        200: {
          schema: definitions["models.PlaylistTransfer"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
    /** Delete playlist with chosen ID */
    delete: {
      responses: {
        /** Playlist deleted */
        200: {
          schema: definitions["http.defaultResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/cover": {
    /** Update playlist cover */
    post: {
      parameters: {
        formData: {
          /** Cover file */
          cover: { [key: string]: any };
        };
      };
      responses: {
        /** Cover updated */
        200: {
          schema: definitions["http.defaultResponse"];
        };
        /** Invalid form data */
        400: {
          schema: definitions["http.Error"];
        };
        /** User Unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/like": {
    /** Set like by user to chosen playlist (add to favorite) */
    post: {
      responses: {
        /** Like set */
        200: {
          schema: definitions["http.defaultResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/tracks": {
    /** All tracks of playlist with chosen ID */
    get: {
      responses: {
        /** Show tracks */
        200: {
          schema: definitions["models.TrackTransfer"][];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/tracks/{trackID}": {
    /** Add track into playlist */
    post: {
      responses: {
        /** Track added */
        200: {
          schema: definitions["http.playlistCreateResponse"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
    /** Delete track from playlist */
    delete: {
      responses: {
        /** Track deleted */
        200: {
          schema: definitions["http.playlistCreateResponse"];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/unlike": {
    /** Remove like by user from chosen playlist (remove from favorite) */
    post: {
      responses: {
        /** Like removed */
        200: {
          schema: definitions["http.defaultResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/{playlistID}/update": {
    /** Update playlist */
    post: {
      parameters: {
        body: {
          /** Playlist info */
          playlist: definitions["http.playlistUpdateInput"];
        };
      };
      responses: {
        /** Playlist updated */
        200: {
          schema: definitions["http.defaultResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/feed": {
    /** Feed playlists */
    get: {
      responses: {
        /** Playlist feed */
        200: {
          schema: definitions["models.PlaylistTransfer"][];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/playlists/search": {
    /** Find amount of playlists by search-query */
    post: {
      parameters: {
        body: {
          /** Query for search */
          query: definitions["delivery.searchRequest"];
        };
      };
      responses: {
        /** Playlists found */
        200: {
          schema: definitions["delivery.searchPlaylistsResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/tracks/": {
    /** Create new track by sent object */
    post: {
      parameters: {
        body: {
          /** Track info */
          track: definitions["http.trackCreateInput"];
        };
      };
      responses: {
        /** Track created */
        200: {
          schema: definitions["http.trackCreateResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/tracks/{trackID}/": {
    /** Get track with chosen ID */
    get: {
      responses: {
        /** Track got */
        200: {
          schema: definitions["models.TrackTransfer"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
    /** Delete track with chosen ID */
    delete: {
      responses: {
        /** Track deleted */
        200: {
          schema: definitions["http.trackDeleteResponse"];
        };
        /** No such track */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/tracks/{trackID}/like": {
    /** Set like by user to chosen track (add to favorite) */
    post: {
      responses: {
        /** Like set */
        200: {
          schema: definitions["http.trackLikeResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/tracks/{trackID}/unlike": {
    /** Remove like by user from chosen track (remove from favorite) */
    post: {
      responses: {
        /** Like removed */
        200: {
          schema: definitions["http.trackLikeResponse"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/tracks/feed": {
    /** Feed tracks */
    get: {
      responses: {
        /** Tracks feed */
        200: {
          schema: definitions["models.TrackTransfer"][];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/tracks/search": {
    /** Find amount of tracks by search-query */
    post: {
      parameters: {
        body: {
          /** Query for search */
          query: definitions["delivery.searchRequest"];
        };
      };
      responses: {
        /** Tracks found */
        200: {
          schema: definitions["delivery.searchTracksResponse"];
        };
        /** Incorrect body */
        400: {
          schema: definitions["http.Error"];
        };
        /** User unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/": {
    /** Get user with chosen ID */
    get: {
      responses: {
        /** User got */
        200: {
          schema: definitions["models.UserTransfer"];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** Unauthorized user */
        401: {
          schema: definitions["http.Error"];
        };
        /** Forbidden user */
        403: {
          schema: definitions["http.Error"];
        };
        /** Can't get user */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/avatar": {
    /** Update user avatar */
    post: {
      parameters: {
        formData: {
          /** Avatar file */
          avatar: { [key: string]: any };
        };
      };
      responses: {
        /** Avatar updated */
        200: {
          schema: definitions["http.userUploadAvatarResponse"];
        };
        /** Invalid form data */
        400: {
          schema: definitions["http.Error"];
        };
        /** User Unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/favorite/albums": {
    /** Get user's favorite albums */
    get: {
      responses: {
        /** Albums got */
        200: {
          schema: definitions["models.AlbumTransfer"][];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** Unauthorized user */
        401: {
          schema: definitions["http.Error"];
        };
        /** Forbidden user */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/favorite/artists": {
    /** Get user's favorite artists */
    get: {
      responses: {
        /** Artists got */
        200: {
          schema: definitions["models.ArtistTransfer"][];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** Unauthorized user */
        401: {
          schema: definitions["http.Error"];
        };
        /** Forbidden user */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/favorite/playlists": {
    /** Get user's favorite playlists */
    get: {
      responses: {
        /** Playlists got */
        200: {
          schema: definitions["models.PlaylistTransfer"][];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** Unauthorized user */
        401: {
          schema: definitions["http.Error"];
        };
        /** Forbidden user */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/favorite/tracks": {
    /** Get ser's avorite tracks */
    get: {
      responses: {
        /** Tracks got */
        200: {
          schema: definitions["models.TrackTransfer"][];
        };
        /** Incorrect input */
        400: {
          schema: definitions["http.Error"];
        };
        /** Unauthorized user */
        401: {
          schema: definitions["http.Error"];
        };
        /** Forbidden user */
        403: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/playlists": {
    /** All playlists of user with chosen ID */
    get: {
      responses: {
        /** Show playlists */
        200: {
          schema: definitions["models.PlaylistTransfer"][];
        };
        /** Client error */
        400: {
          schema: definitions["http.Error"];
        };
        /** Server error */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
  "/api/users/{userID}/update": {
    /** Update info about user */
    post: {
      parameters: {
        body: {
          /** User info */
          user: definitions["http.userInfoInput"];
        };
      };
      responses: {
        /** User info updated */
        200: {
          schema: definitions["http.userUploadAvatarResponse"];
        };
        /** Invalid input */
        400: {
          schema: definitions["http.Error"];
        };
        /** User Unathorized */
        401: {
          schema: definitions["http.Error"];
        };
        /** User hasn't rights */
        403: {
          schema: definitions["http.Error"];
        };
        /** Can't change user info */
        500: {
          schema: definitions["http.Error"];
        };
      };
    };
  };
}

export interface definitions {
  "delivery.searchAlbumsResponse": {
    albums?: definitions["models.AlbumTransfer"][];
  };
  "delivery.searchArtistsResponse": {
    artists?: definitions["models.ArtistTransfer"][];
  };
  "delivery.searchPlaylistsResponse": {
    playlists?: definitions["models.PlaylistTransfer"][];
  };
  "delivery.searchRequest": {
    amount?: number;
    query?: string;
  };
  "delivery.searchTracksResponse": {
    tracks?: definitions["models.TrackTransfer"][];
  };
  "http.Error": {
    message?: string;
  };
  "http.albumCreateInput": {
    artists?: number[];
    cover?: string;
    description?: string;
    name?: string;
  };
  "http.albumCreateResponse": {
    id?: number;
  };
  "http.albumDeleteResponse": {
    status?: string;
  };
  "http.albumLikeResponse": {
    status?: string;
  };
  "http.artistCreateInput": {
    cover?: string;
    name?: string;
  };
  "http.artistCreateResponse": {
    id?: number;
  };
  "http.artistDeleteResponse": {
    status?: string;
  };
  "http.artistLikeResponse": {
    status?: string;
  };
  "http.defaultResponse": {
    status?: string;
  };
  "http.loginInput": {
    password?: string;
    username?: string;
  };
  "http.loginResponse": {
    id?: number;
  };
  "http.logoutResponse": {
    status?: string;
  };
  "http.playlistCreateInput": {
    description?: string;
    name?: string;
    users?: number[];
  };
  "http.playlistCreateResponse": {
    id?: number;
  };
  "http.playlistUpdateInput": {
    description?: string;
    name?: string;
    users?: number[];
  };
  "http.signUpResponse": {
    id?: number;
  };
  "http.trackCreateInput": {
    albumID?: number;
    albumPosition?: number;
    artistsID?: number[];
    name?: string;
    record?: string;
  };
  "http.trackCreateResponse": {
    id?: number;
  };
  "http.trackDeleteResponse": {
    status?: string;
  };
  "http.trackLikeResponse": {
    status?: string;
  };
  "http.userInfoInput": {
    birthDate?: definitions["models.Date"];
    email?: string;
    firstName?: string;
    lastName?: string;
    sex?: definitions["models.Sex"];
  };
  "http.userUploadAvatarResponse": {
    status?: string;
  };
  "models.AlbumTransfer": {
    artists?: definitions["models.ArtistTransfer"][];
    cover?: string;
    description?: string;
    id?: number;
    isLiked?: boolean;
    name?: string;
  };
  "models.ArtistTransfer": {
    cover?: string;
    id?: number;
    isLiked?: boolean;
    name?: string;
  };
  "models.Date": {
    "time.Time"?: string;
  };
  "models.PlaylistTransfer": {
    cover?: string;
    description?: string;
    id?: number;
    isLiked?: boolean;
    name?: string;
    users?: definitions["models.UserTransfer"][];
  };
  "models.Sex": "M" | "F" | "O";
  "models.TrackTransfer": {
    albumID?: number;
    albumPosition?: number;
    artists?: definitions["models.ArtistTransfer"][];
    cover?: string;
    duration?: number;
    id?: number;
    isLiked?: boolean;
    listens?: number;
    name?: string;
    recordSrc?: string;
  };
  "models.User": {
    avatarSrc?: string;
    birthDate?: definitions["models.Date"];
    email?: string;
    firstName?: string;
    lastName?: string;
    password?: string;
    sex?: definitions["models.Sex"];
    username?: string;
  };
  "models.UserTransfer": {
    avatarSrc?: string;
    birthDate?: definitions["models.Date"];
    email?: string;
    firstName?: string;
    id?: number;
    lastName?: string;
    sex?: definitions["models.Sex"];
    username?: string;
  };
}

export interface operations {}
